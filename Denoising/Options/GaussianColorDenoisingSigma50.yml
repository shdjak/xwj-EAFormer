# general settings
name: GaussianColorDenoising_adair_tlc_Sigma50
model_type: ImageCleanModel
scale: 1
num_gpu: 1  # set num_gpu: 0 for cpu mode
manual_seed: 100

# dataset and data loader settings
datasets:
  train:
    name: TrainSet
    type: Dataset_GaussianDenoising
    sigma_type: constant
    sigma_range: 50
    in_ch: 3    ## RGB image
    dataroot_gt: ./Denoising/Datasets/train/DFWB
#    dataroot_gt: /mnt/d/pycharm_code/X-Restormer-master/datasets/Denoise/DFWB.lmdb
    dataroot_lq: none
    geometric_augs: true

    filename_tmpl: '{}'
    io_backend:
#      type: lmdb
      type: disk

    # data loader
    use_shuffle: true
    num_worker_per_gpu: 8
    #batch_size_per_gpu: 8！！！！决定了[B,C,H,W]的B
    batch_size_per_gpu: 8

#    ### -------------Progressive training--------------------------
    #原版
#    mini_batch_sizes: [7,4,3,1,1,1]             # Batch size per gpu
#    iters: [92000,64000,48000,36000,36000,24000]
#    gt_size: 320   # Max patch size for progressive training
#    gt_sizes: [128,160,192,256,320,320]  # Patch sizes for progressive training.

#  adair + ukan
#    mini_batch_sizes: [5,3,2,1,1,1]             # Batch size per gpu
#    iters: [92000,64000,48000,36000,36000,24ressive training
    ##    gt_sizes: [128,160,192,256,320,320]  # Pa000]
#    gt_size: 320   # Max patch size for progtch sizes for progressive training.

#    SMFANET
#    mini_batch_sizes: [7,4,3,1,1,1]             # Batch size per gpu
#    iters: [92000,64000,48000,36000,36000,24000]
#    gt_size: 320   # Max patch size for progressive training
#    gt_sizes: [128,160,192,256,320,320]  # Patch sizes for progressive training.

    # adair + mambair，
#    mini_batch_sizes: [7,4,3,1,1,1]             # Batch size per gpu
#    iters: [92000,64000,48000,36000,36000,24000]
#    gt_size: 384   # Max patch size for progressive training
#    gt_sizes: [128,160,192,256,320,384]  # Patch sizes for progressive training.

#    condformer、adair add agentattention配置
    # 必看：由于agent attention无法处理test中的数据的高度宽度不一致的情况，故自己在basicir/models/image_restoration_model的def pad_test中做了一定修改，采用其他模型时记得调回默认代码
#    mini_batch_sizes: [7,4,3,1,1,1]             # Batch size per gpu
#    iters: [92000,64000,48000,36000,36000,24000]
#    gt_size: 320   # Max patch size for progressive training
#    gt_sizes: [128,160,192,256,320,320]  # Patch sizes for progressive training.
#    ### ------------------------------------------------------------


#    ### -------------Progressive training--------------------------
    #ramit配置
#    mini_batch_sizes: [2,1]             # Batch size per gpu
#    iters: [150000,150000]
#    gt_size: 192   # Max patch size for progressive training
#    gt_sizes: [128,192]  # Patch sizes for progressive training.
#    ### ------------------------------------------------------------

    ### ------- Training on single fixed-patch size 128x128---------
    #
    mini_batch_sizes: [1]
    iters: [300000]
    gt_size: 320
    gt_sizes: [320]

#    mini_batch_sizes: [ 1 ]
#    iters: [ 300000 ]
#    gt_size: 384
#    gt_sizes: [ 384 ]
    ### ------------------------------------------------------------

    dataset_enlarge_ratio: 1
    prefetch_mode: ~
#    prefetch_mode: cuda
    #只有prefetch_mode: cuda时需要设置pin_memory: True，其他时候都注释,使用cuda比cpu和默认都快一些
#    pin_memory: True


  val:
    name: ValSet
    type: Dataset_GaussianDenoising
    sigma_test: 50
    in_ch: 3  ## RGB image
    dataroot_gt: ./Denoising/Datasets/test/CBSD68
    dataroot_lq: none
    io_backend:
      type: disk

# network structures
network_g:
  type: AdaIRLocal
  inp_channels: 3
  out_channels: 3
  #原版dim: 48，ramit要求64
#  dim: 64
  #condformer
  dim: 48

  # 原版num_blocks: [4,6,6,8]
  num_blocks: [4,6,6,8]
  # mambair-config
#  num_blocks: [3,4,4,4]
  #现在是ramit版num_blocks: [6,4,4,6]
# SMFANET num_blocks: [8,8,8,8]
  #num_blocks: [3,4,4,4]
#  num_blocks: [1,1,1,1]

  # 原版num_refinement_blocks: 4
  #现在是ramit版num_refinement_blocks:4
  # mambair-config
  #num_refinement_blocks: 1
  num_refinement_blocks: 4

  # 原版 heads: [1,2,4,8]
  #现在是ramit版heads: [4,4,4,4]，用8会报错，不能除尽8
  heads: [1,2,4,8]

  ffn_expansion_factor: 2.66
  bias: False
  LayerNorm_type: BiasFree
  dual_pixel_task: False


# path
path:
#  pretrain_network_g: ./experiments/GaussianColorDenoising_AdaIR_SMFANETv4_Sigma50/models/net_g_284000.pth
#  pretrain_network_g: experiments/GaussianColorDenoising_Restormer_tlcv3_Sigma50/models/net_g_272000.pth
  pretrain_network_g: ./Denoising/pretrained_models/gaussian_color_denoising_sigma50.pth
#  pretrain_network_g: ./experiments/GaussianColorDenoising_AdaIR_LONPE_Sigma50/models/net_g_300000.pth
  strict_load_g: true
  resume_state: ~

# training settings
train:
  total_iter: 300000
  warmup_iter: -1 # no warm up
  use_grad_clip: true

  # Split 300k iterations into two cycles. 
  # 1st cycle: fixed 3e-4 LR for 92k iters. 
  # 2nd cycle: cosine annealing (3e-4 to 1e-6) for 208k iters.
  scheduler:
    type: CosineAnnealingRestartCyclicLR
    periods: [92000, 208000]       
    restart_weights: [1,1]
    eta_mins: [0.0003,0.000001]
#    eta_mins: [0.000015,0.0000001]
  
  mixing_augs:
    mixup: true
    mixup_beta: 1.2
    use_identity: true

  optim_g:
    type: AdamW
    lr: !!float 3e-4
#    lr: !!float 1.5e-5
    weight_decay: !!float 1e-4
    betas: [0.9, 0.999]
  
  # losses
  pixel_opt:
#    type: L1Loss
    type: PSNRLoss
    loss_weight: 1
    reduction: mean

# validation settings
val:
  window_size: 8
#  原版val_freq: !!float 4e3
#  val_freq: !!float 2e2
  val_freq: !!float 4e3
  save_img: false
  rgb2bgr: true
  use_image: false
  max_minibatch: 8

  metrics:
    psnr: # metric name, can be arbitrary
      type: calculate_psnr
      crop_border: 0
      test_y_channel: false

    ssim: # metric name, can be arbitrary
      type: calculate_ssim
      crop_border: 0
      test_y_channel: false

# logging settings
logger:
#  原版print_freq: 1000
#  print_freq: 100
  print_freq: 1000
#  原版save_checkpoint_freq: !!float 4e3
#  save_checkpoint_freq: !!float 2e2
  save_checkpoint_freq: !!float 4e3
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500
